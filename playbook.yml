---
- hosts: all
  become: yes

  vars_files:
    - ./vars/vars.yml

  vars_prompt:
    - name: symfony_env
      prompt: "Enter the environment for your Symfony app (prod|test|dev)"
      default: dev
      private: no

  environment:
    SYMFONY_ENV: "{{ symfony_env|lower }}"

  pre_tasks:
    - name: Convert entered Symfony enviroment to lowercase
      set_fact:
        symfony_env: "{{ symfony_env|lower }}"
      tags:
        - always

    - name: Install aptitude
      become: true
      apt:
        name: aptitude

    - name: Update APT package repositories
      become: true
      apt:
        update_cache: yes

    - name: Upgrade installed packages
      become: true
      apt:
        upgrade: safe

  roles:
    - nginx
    - role: geerlingguy.git
    - role: geerlingguy.php-versions
    - role: geerlingguy.php
    - role: geerlingguy.composer
    - role: geerlingguy.mysql
    - role: geerlingguy.php-mysql
    - role: geerlingguy.php-xdebug
    - role: geerlingguy.redis
    - role: gantsign.antigen
      users:
        - username: "{{ ansible_user }}"
          antigen_libraries:
            - name: oh-my-zsh
          antigen_theme:
            name: af-magic
          antigen_bundles:
            # Autosuggestions bundle.
            - name: zsh-autosuggestions
              url: zsh-users/zsh-autosuggestions

  tasks:
    - ping: ~

    - name: Install low-level Utils
      become: true
      apt:
        name: "{{ item }}"
      with_items:
        - zip
        - unzip

    - name: add enabled site to /etc/hosts
      become: true
      lineinfile:
        dest: /etc/hosts
        regexp: "{{ server_name }}"
        line: "127.0.0.1 {{ server_name }}"

    # - name: Symlink the .env file
    #   file:
    #     src: "./.env.dev"
    #     dest: "{{ symfony_root_dir }}/.env"
    #     group: "www-data"
    #     owner: "vagrant"
    #     state: link
    #   tags:
    #     - deploy

    # Bootstrap Symfony app
    - name: Install composer's deps
      become: false
      composer:
        working_dir: "{{ symfony_root_dir }}"
        no_dev: "{{ 'yes' if ('prod' == symfony_env) else 'no'}}"
    #  when: code_changed
      tags:
        - deploy

    ## Symfony console commands
#    - name: create db id it does not exit
#      command: "{{ symfony_console_path }} doctrine:database:create --if-not-exists"
#      register: db_create_result
#      changed_when: "not db_create_result.stdout|search('already exists. Skipped')"
#      tags:
#        - deploy
#
#    - name: Execute migrations
#      command: "{{ symfony_console_path }} doctrine:migrations:migrate --no-interaction"
#      register: db_migrations_result
#      changed_when: "not db_migrations_result.stdout|search('No migrations to execute')"
#      tags:
#        - deploy
#
#    - name: Clear Cache
#      command: '{{ symfony_console_path }} cache:clear --env={{ symfony_env }} --no-warmup'
#      changed_when: false
#      tags:
#        - deploy

#    - name: Check if admin user created
#      command: "{{ symfony_console_path }} doctrine:query:sql \"SELECT username FROM user WHERE username = 'admin'\""
#      register: user_query
#      tags:
#        - deploy
#
#    - name: Create super admin user
#      command: '{{ symfony_console_path }} fos:user:create admin admin@example.com admin --super-admin'
#      changed_when: false
#      when: "not user_query.stdout|search('admin')"
#      ignore_errors: yes
#      tags:
#        - deploy

#    - name: Load fixtures
#      command: "{{ symfony_console_path }} hautelook_alice:doctrine:fixtures:load --no-interaction"
#      changed_when: false
#      when: symfony_env != "prod"
#      tags:
#        - deploy
    - name: Set SSH home directory.
      lineinfile:
        dest: "/home/{{ ansible_user }}/.bashrc"
        state: present
        create: yes
        regexp: "^SSH_HOME="
        line: "SSH_HOME={{ ssh_home }} && [ -e $SSH_HOME ] && cd $SSH_HOME"
      become: no
      when: ssh_home is defined

    - name: Set Zsh SSH home directory.
      lineinfile:
        dest: "/home/{{ ansible_user }}/.zshrc"
        state: present
        create: yes
        regexp: "^SSH_HOME="
        line: "SSH_HOME={{ ssh_home }} && [ -e $SSH_HOME ] && cd $SSH_HOME"
      become: no
      when: ssh_home is defined

  handlers:
    - name: Restart PHP-FPM
      become: true
      service:
        name: php{{ php_version }}-fpm
        state: restarted
